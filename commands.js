const { Markup } = require("telegraf");
const fs = require("fs");
const User = require("./models/user");

const appUrl = "https://danikkkkk12.github.io/nftbot/";
const agreementUrl = "https://example.com/user-agreement";
const imagePath = "./content/nft.png";

module.exports.startCommand = async (ctx) => {
  try {
    const tgId = ctx.from.id;

    await ctx.replyWithPhoto({ source: fs.createReadStream(imagePath) });

    await ctx.reply(
      "‚¨á –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ:",
      Markup.inlineKeyboard([
        [Markup.button.webApp("üöÄ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ üöÄ", appUrl)],
        [Markup.button.webApp("üìú User Agreement üìú", agreementUrl)],
        [Markup.button.callback("üåê Join Community üåê", "community")],
        [Markup.button.callback("‚ùì Support", "support ‚ùì")],
      ])
    );

    let user = await User.findOne({ telegramId: tgId });

    if (!user) {
      user = await User.create({
        username: ctx.from.username || "",
        firstName: ctx.from.first_name || "NoName",
        telegramId: tgId,
      });
    }
  } catch (err) {
    console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ /start:", err);
    await ctx.reply("‚ö†Ô∏è –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –∫–æ–º–∞–Ω–¥–∏ /start.");
  }
};

module.exports.buttonActions = (bot) => {
  bot.action("community", (ctx) => {
    ctx.reply("–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –Ω–∞—à–µ–º—É —Å–æ–æ–±—â–µ—Å—Ç–≤—É: @your_community_link");
  });

  bot.action("support", (ctx) => {
    ctx.reply("–°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π: @support_bot");
  });
};
