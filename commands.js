const { Markup } = require("telegraf");
const fs = require("fs");
const User = require("./models/user");

const appUrl = "https://danikkkkk12.github.io/nftbot/";
const agreementUrl = "https://example.com/user-agreement";
const imagePath = "./content/nft.png";

module.exports.startCommand = async (ctx) => {
  try {
    const tgId = ctx.from.id;

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ
    await ctx.replyWithPhoto({ source: fs.createReadStream(imagePath) });

    // –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    await ctx.reply(
      "‚¨á –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ:",
      Markup.inlineKeyboard([
        [Markup.button.webApp("üöÄ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ üöÄ", appUrl)],
        [Markup.button.webApp("üìú User Agreement üìú", agreementUrl)],
        [Markup.button.callback("üåê Join Community üåê", "community")],
        [Markup.button.callback("‚ùì Support", "support")],
      ])
    );

    // –ü–æ–∏—Å–∫ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    let user = await User.findOne({ telegramId: tgId });
    
    if (!user) {
      user = await User.findOneAndUpdate(
        { telegramId: tgId },
        {
          username: ctx.from.username || undefined, // –ò—Å–ø–æ–ª—å–∑—É–µ–º undefined –≤–º–µ—Å—Ç–æ –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–∏
          firstName: ctx.from.first_name || "NoName",
          telegramId: tgId,
          $setOnInsert: { balance: 0 } // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–∞–ª–∞–Ω—Å —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏
        },
        { 
          upsert: true,
          new: true,
          setDefaultsOnInsert: true
        }
      );
      console.log("üÜï –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:", user.telegramId);
    }

    await ctx.reply(`üí∞ –¢–≤–æ–π –±–∞–ª–∞–Ω—Å: ${user.balance} –º–æ–Ω–µ—Ç`);
  } catch (err) {
    if (err.code === 11000) {
      // –ï—Å–ª–∏ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ, –ø—Ä–æ—Å—Ç–æ –ø–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const user = await User.findOne({ telegramId: ctx.from.id });
      await ctx.reply(`üí∞ –¢–≤–æ–π –±–∞–ª–∞–Ω—Å: ${user.balance} –º–æ–Ω–µ—Ç`);
    } else {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ /start:", err);
      await ctx.reply("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
    }
  }
};

module.exports.buttonActions = (bot) => {
  bot.action("community", (ctx) => {
    ctx.reply("–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –Ω–∞—à–µ–º—É —Å–æ–æ–±—â–µ—Å—Ç–≤—É: @your_community_link");
  });

  bot.action("support", (ctx) => {
    ctx.reply("–°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π: @support_bot");
  });
};
