const { Markup } = require("telegraf");
const fs = require("fs");
const User = require("./models/user");

const appUrl = "https://danikkkkk12.github.io/nftbot/";
const agreementUrl = "https://example.com/user-agreement";
const imagePath = "./content/nft.png";

module.exports.startCommand = async (ctx) => {
  const tgId = ctx.from.id;
  const { username, first_name, last_name } = ctx.from;

  try {
    // –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∞–≤–∞—Ç–∞—Ä–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (–∞–±–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç)
    let avatarUrl = "default-avatar-url.jpg";
    try {
      const photos = await ctx.telegram.getUserProfilePhotos(tgId);
      if (photos.total_count > 0) {
        const fileId = photos.photos[0][0].file_id;
        const file = await ctx.telegram.getFile(fileId);
        avatarUrl = `https://api.telegram.org/file/bot${process.env.BOT_TOKEN}/${file.file_path}`;
      }
    } catch (err) {
      console.warn("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –∞–≤–∞—Ç–∞—Ä:", err.message);
    }

    // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∞–±–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    const updatedUser = await User.findOneAndUpdate(
      { telegramId: tgId },
      {
        $set: {
          username: username || undefined,
          firstName: first_name || "NoName",
          lastName: last_name || undefined,
          avatar: avatarUrl,
        },
        $setOnInsert: {
          telegramId: tgId,
          balance: 0,
        },
      },
      {
        upsert: true,
        new: true,
        setDefaultsOnInsert: true,
      }
    );

    // –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è —Ñ–æ—Ç–æ
    await ctx.replyWithPhoto({ source: fs.createReadStream(imagePath) });

    // –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏
    await ctx.reply(
      "‚¨á –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ:",
      Markup.inlineKeyboard([
        // [Markup.button.webApp("üöÄ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ üöÄ", appUrl)],
        [
          Markup.button.webApp(
            "üöÄ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ üöÄ",
            `${appUrl}?tgInitData=${encodeURIComponent(ctx.webAppInitData)}`
          ),
        ],
        [Markup.button.webApp("üìú User Agreement üìú", agreementUrl)],
        [Markup.button.callback("üåê Join Community üåê", "community")],
        [Markup.button.callback("‚ùì Support", "support")],
      ])
    );
  } catch (err) {
    if (err.code === 11000) {
      console.error("‚ö†Ô∏è –ö–æ–Ω—Ñ–ª—ñ–∫—Ç —É–Ω—ñ–∫–∞–ª—å–Ω–æ–≥–æ –ø–æ–ª—è:", err.keyValue);
      await ctx.reply(
        "‚ùå –ü–æ–º–∏–ª–∫–∞: –¥–∞–Ω—ñ –≤–∂–µ —ñ—Å–Ω—É—é—Ç—å (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É)."
      );
    } else {
      console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ /start:", err);
      await ctx.reply("‚ö†Ô∏è –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.");
    }
  }
};

module.exports.buttonActions = (bot) => {
  bot.action("community", (ctx) => {
    ctx.reply("–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –Ω–∞—à–µ–º—É —Å–æ–æ–±—â–µ—Å—Ç–≤—É: @your_community_link");
  });

  bot.action("support", (ctx) => {
    ctx.reply("–°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π: @support_bot");
  });
};
