const { Markup } = require("telegraf");
const fs = require("fs");
const User = require("./models/user");

const appUrl = "https://danikkkkk12.github.io/nftbot/";
const agreementUrl = "https://example.com/user-agreement";
const imagePath = "./content/nft.png";

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function logUserAction(tgId, actionType) {
  try {
    await User.findOneAndUpdate(
      { telegramId: tgId },
      {
        $set: { lastActive: new Date() },
        $inc: { [`actions.${actionType}`]: 1 }
      },
      { upsert: true }
    );
  } catch (err) {
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥–µ–π—Å—Ç–≤–∏—è ${actionType}:`, err);
  }
}

module.exports.startCommand = async (ctx) => {
  const tgId = ctx.from.id;
  const { username, first_name, last_name } = ctx.from;

  try {
    // –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ start
    await logUserAction(tgId, 'start');

    // –ü–æ–ª—É—á–∞–µ–º –∞–≤–∞—Ç–∞—Ä
    let avatarUrl = "default-avatar-url.jpg";
    try {
      const photos = await ctx.telegram.getUserProfilePhotos(tgId);
      if (photos.total_count > 0) {
        const fileId = photos.photos[0][0].file_id;
        const file = await ctx.telegram.getFile(fileId);
        avatarUrl = `https://api.telegram.org/file/bot${process.env.BOT_TOKEN}/${file.file_path}`;
      }
    } catch (err) {
      console.warn("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–≤–∞—Ç–∞—Ä:", err.message);
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const updatedUser = await User.findOneAndUpdate(
      { telegramId: tgId },
      {
        $set: {
          username: username || undefined,
          firstName: first_name || "NoName",
          lastName: last_name || undefined,
          avatar: avatarUrl,
          lastActive: new Date()
        },
        $setOnInsert: {
          telegramId: tgId,
          balance: 0,
          actions: {}
        }
      },
      {
        upsert: true,
        new: true,
        setDefaultsOnInsert: true
      }
    );

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ
    try {
      await ctx.replyWithPhoto({ source: fs.createReadStream(imagePath) });
    } catch (err) {
      console.warn("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:", err.message);
    }

    const urlWithId = `${appUrl}?tgId=${tgId}`;
    await ctx.reply(
      "‚¨á –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ:",
      Markup.inlineKeyboard([
        [Markup.button.webApp("üöÄ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ üöÄ", urlWithId)],
        [Markup.button.webApp("üìú User Agreement üìú", agreementUrl)],
        [Markup.button.callback("üåê Join Community üåê", "community")],
        [Markup.button.callback("‚ùì Support", "support")],
      ])
    );
  } catch (err) {
    if (err.code === 11000) {
      console.error("‚ö†Ô∏è –ö–æ–Ω—Ñ–ª–∏–∫—Ç —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –ø–æ–ª—è:", err.keyValue);
      await ctx.reply("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞).");
    } else {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ /start:", err);
      await ctx.reply("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
    }
  }
};

module.exports.buttonActions = (bot) => {
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  bot.action(/webApp:(.+)/, async (ctx) => {
    const tgId = ctx.from.id;
    await logUserAction(tgId, 'openApp');
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞, –µ—Å–ª–∏ –Ω—É–∂–Ω–∞
  });

  bot.action("community", async (ctx) => {
    const tgId = ctx.from.id;
    await logUserAction(tgId, 'joinCommunity');
    ctx.reply("–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –Ω–∞—à–µ–º—É —Å–æ–æ–±—â–µ—Å—Ç–≤—É: @your_community_link");
  });

  bot.action("support", async (ctx) => {
    const tgId = ctx.from.id;
    await logUserAction(tgId, 'support');
    ctx.reply("–°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π: @support_bot");
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  bot.on('web_app_data', async (ctx) => {
    const tgId = ctx.from.id;
    await logUserAction(tgId, 'webAppInteraction');
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  });
};